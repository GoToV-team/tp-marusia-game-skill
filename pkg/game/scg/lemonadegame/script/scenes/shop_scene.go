// Code generated by scg 1, .
//
// LemonadeGame-SceneStructs
//
// Command:
// scg
//.

package scenes

import (
    "github.com/ThCompiler/go_game_constractor/director"
    "github.com/ThCompiler/go_game_constractor/director/scriptdirector/scene"
    "github.com/evrone/go-clean-template/pkg/game/scg/lemonadegame/manager"
    "github.com/evrone/go-clean-template/pkg/game/scg/lemonadegame/script/errors"
    "github.com/evrone/go-clean-template/pkg/game/scg/lemonadegame/script/matchers"
)

const (
    // BuyBugsShopButtonText - text for button BuyBugs
    BuyBugsShopButtonText = "Купить защиту от жуков"
    // BuyFlyShopButtonText - text for button BuyFly
    BuyFlyShopButtonText = "Купить защиту от ветра"
    // BuyGreenhouseShopButtonText - text for button BuyGreenhouse
    BuyGreenhouseShopButtonText = "Купить теплицу"
    // BuyHealShopButtonText - text for button BuyHeal
    BuyHealShopButtonText = "Купить аптечку"
    // EndShopShopButtonText - text for button EndShop
    EndShopShopButtonText = "Закончить покупки"
    // BuyDropsShopButtonText - text for button BuyDrops
    BuyDropsShopButtonText = "Купить капель"
)

// Shop scene
type Shop struct {
    TextManager manager.TextManager
    NextScene   SceneName
}

// React function of actions after scene has been played
func (sc *Shop) React(ctx *scene.Context) scene.Command {
    // TODO Write the actions after Shop scene has been played
    switch {
    // Buttons select
    case ctx.Request.NameMatched == BuyBugsShopButtonText && ctx.Request.WasButton:

    case ctx.Request.NameMatched == BuyFlyShopButtonText && ctx.Request.WasButton:

    case ctx.Request.NameMatched == BuyGreenhouseShopButtonText && ctx.Request.WasButton:

    case ctx.Request.NameMatched == BuyHealShopButtonText && ctx.Request.WasButton:

    case ctx.Request.NameMatched == EndShopShopButtonText && ctx.Request.WasButton:

    case ctx.Request.NameMatched == BuyDropsShopButtonText && ctx.Request.WasButton:

        // Matcher select
    case ctx.Request.NameMatched == matchers.BuyDropsMatchedString:

    case ctx.Request.NameMatched == matchers.BuyGreenhouseMatchedString:

    case ctx.Request.NameMatched == matchers.BuyFlyMatchedString:

    case ctx.Request.NameMatched == matchers.BuyBugsMatchedString:

    case ctx.Request.NameMatched == matchers.BuyHealMatchedString:

    case ctx.Request.NameMatched == matchers.EndShopMatchedString:

    }

    sc.NextScene = ShopScene // TODO: manually set next scene after reaction
    return scene.NoCommand
}

// Next function returning next scene
func (sc *Shop) Next() scene.Scene {
    switch sc.NextScene {
    case DropsSaleScene:
        return &DropsSale{
            TextManager: sc.TextManager,
        }
    case GreenhouseSaleScene:
        return &GreenhouseSale{
            TextManager: sc.TextManager,
        }
    case FlySaleScene:
        return &FlySale{
            TextManager: sc.TextManager,
        }
    case BugsSaleScene:
        return &BugsSale{
            TextManager: sc.TextManager,
        }
    case HealSaleScene:
        return &HealSale{
            TextManager: sc.TextManager,
        }
    case ApproveEndDayScene:
        return &ApproveEndDay{
            TextManager: sc.TextManager,
        }
    }

    return &Shop{
        TextManager: sc.TextManager,
    }
}

// GetSceneInfo function returning info about scene
func (sc *Shop) GetSceneInfo(_ *scene.Context) (scene.Info, bool) {
    var (
        bugsCost       uint64
        flyCost        uint64
        greenhouseCost uint64
        healCost       uint64
    )

    // TODO Write some actions for get data for texts

    text, _ := sc.TextManager.GetShopText(
        bugsCost,
        flyCost,
        greenhouseCost,
        healCost,
    )
    return scene.Info{
        Text: text,
        ExpectedMessages: []scene.MessageMatcher{
            matchers.BuyDropsMatcher,
            matchers.BuyGreenhouseMatcher,
            matchers.BuyFlyMatcher,
            matchers.BuyBugsMatcher,
            matchers.BuyHealMatcher,
            matchers.EndShopMatcher,
        },
        Buttons: []director.Button{
            {
                Title: BuyBugsShopButtonText,
            },
            {
                Title: BuyFlyShopButtonText,
            },
            {
                Title: BuyGreenhouseShopButtonText,
            },
            {
                Title: BuyHealShopButtonText,
            },
            {
                Title: EndShopShopButtonText,
            },
            {
                Title: BuyDropsShopButtonText,
            },
        },
        Err: errors.YouAboutWhatError,
    }, true
}
