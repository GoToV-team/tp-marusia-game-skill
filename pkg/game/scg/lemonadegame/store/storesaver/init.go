// Code generated by scg 1,  DO NOT EDIT .
//
// LemonadeGame-Store saver
//
// Command:
// scg
// DO NOT EDIT .

package storesaver

import (
	consts "github.com/evrone/go-clean-template/pkg/game/scg/lemonadegame/consts/textsname"
	"github.com/evrone/go-clean-template/pkg/game/scg/lemonadegame/store"
)

const checkKey = "LemonadeGame-d0775841-db25-4329-bfe8-4128aec6562e"

func checkScriptStore(st store.ScriptStore) bool {
	text, err := st.GetText(checkKey)
	if text != "" && err == nil {
		return true
	}
	return false
}

func saveScripts(st store.ScriptStore) error {
	var err error
	// Set text for ApproveEndDay scene
	if err = st.SetText(consts.ApproveEndDayText, `Вы точно хотите закончить день?`); err != nil {
		return err
	}
	if err = st.SetText(consts.ApproveEndDayTTS, `Вы точно хотите закончить день?`); err != nil {
		return err
	}

	// Set text for BugsInfo scene
	if err = st.SetText(consts.BugsInfoText, `Замечательно, Вы купили защиту от жуков.`); err != nil {
		return err
	}
	if err = st.SetText(consts.BugsInfoTTS, `Замечательно, Вы купили защиту от жуков.`); err != nil {
		return err
	}

	// Set text for BugsSale scene
	if err = st.SetText(consts.BugsSaleText, `Вашему дереву. Защита от жуков нужна для того, чтобы жуки не поедали листья на Вашем дереве. Она стоит {bugsCost} монет. Будете ли Вы покупать защиту от жуков?`); err != nil {
		return err
	}
	if err = st.SetText(consts.BugsSaleTTS, `Вашему дереву. Защита от жуков нужна для того, чтобы жуки не поедали листья на Вашем дереве. Она стоит {bugsCost} монет. Будете ли Вы покупать защиту от жуков?`); err != nil {
		return err
	}

	// Set text for DropsInfo scene
	if err = st.SetText(consts.DropsInfoText, `Отлично, теперь у вас есть {dropsCount} капель воды.`); err != nil {
		return err
	}
	if err = st.SetText(consts.DropsInfoTTS, `Отлично, теперь у вас есть {dropsCount} капель воды.`); err != nil {
		return err
	}

	// Set text for DropsSale scene
	if err = st.SetText(consts.DropsSaleText, `Вода нужна для поливки дерева. Обычно одному листу нужно 5 капель воды. За сколько капель воды Вы готовы заплатить?`); err != nil {
		return err
	}
	if err = st.SetText(consts.DropsSaleTTS, `Вода нужна для поливки дерева. Обычно одному листу нужно пять капель воды. За сколько капель воды Вы готовы заплатить?`); err != nil {
		return err
	}

	// Set text for EndGame scene
	if err = st.SetText(consts.EndGameText, `По итогу твой игровой счёт: {score} очков`); err != nil {
		return err
	}
	if err = st.SetText(consts.EndGameTTS, `По итогу твой игровой счёт: {score} очков`); err != nil {
		return err
	}

	// Set text for EndOfDay scene
	if err = st.SetText(consts.EndOfDayText, `На конец дня у вас осталось {balance} монет. На дереве осталось {petalsCount} лепестков и {livesCount} жизней. Продолжим?`); err != nil {
		return err
	}
	if err = st.SetText(consts.EndOfDayTTS, `На конец дня у вас осталось {balance} монет. На дереве осталось {petalsCount} лепестков и {livesCount} жизней. Продолжим?`); err != nil {
		return err
	}

	// Set text for FlyInfo scene
	if err = st.SetText(consts.FlyInfoText, `Хорошо, теперь у вас есть защита от ветра.`); err != nil {
		return err
	}
	if err = st.SetText(consts.FlyInfoTTS, `Хорошо, теперь у вас есть защита от ветра.`); err != nil {
		return err
	}

	// Set text for FlySale scene
	if err = st.SetText(consts.FlySaleText, `Защита от ветра не позволяет ветру срывать листья с Вашего дерева. Она стоит {flyCost} монет. Хотите ли Вы купить защиту от ветра?`); err != nil {
		return err
	}
	if err = st.SetText(consts.FlySaleTTS, `Защита от ветра не позволяет ветру срывать листья с Вашего дерева. Она стоит {flyCost} монет. Хотите ли Вы купить защиту от ветра?`); err != nil {
		return err
	}

	// Set text for Goodbye scene
	if err = st.SetText(consts.GoodbyeText, `Пока пока. Приходи ещё!`); err != nil {
		return err
	}
	if err = st.SetText(consts.GoodbyeTTS, `Пока пока. Приходи ещё!`); err != nil {
		return err
	}

	// Set text for GreenhouseInfo scene
	if err = st.SetText(consts.GreenhouseInfoText, `Замечательно, купленная теплица поможет не замерзнуть Вашему дереву.`); err != nil {
		return err
	}
	if err = st.SetText(consts.GreenhouseInfoTTS, `Замечательно, купленная теплица поможет не замерзнуть Вашему дереву.`); err != nil {
		return err
	}

	// Set text for GreenhouseSale scene
	if err = st.SetText(consts.GreenhouseSaleText, `Теплица согреет растение в холодную погоду. Она стоит {greenhouseCost} монет. Нужна ли Вам теплица?`); err != nil {
		return err
	}
	if err = st.SetText(consts.GreenhouseSaleTTS, `Теплица согреет растение в холодную погоду. Она стоит {greenhouseCost} монет. Нужна ли Вам теплица?`); err != nil {
		return err
	}

	// Set text for HealInfo scene
	if err = st.SetText(consts.HealInfoText, `Теперь у вас есть аптечка.`); err != nil {
		return err
	}
	if err = st.SetText(consts.HealInfoTTS, `Теперь у вас есть аптечка.`); err != nil {
		return err
	}

	// Set text for HealSale scene
	if err = st.SetText(consts.HealSaleText, `Аптечка восстанавливает 1 жизнь, если Вы случайно забыли полить растение. Она стоит 5 монет. Нужна ли Вам аптечка?`); err != nil {
		return err
	}
	if err = st.SetText(consts.HealSaleTTS, `Аптечка восстанавливает одну жизнь, если Вы случайно забыли полить растение. Она стоит пять монет. Нужна ли Вам аптечка?`); err != nil {
		return err
	}

	// Set text for Hello scene
	if err = st.SetText(consts.HelloText, `Привет! Добро пожаловать в игру "Лимонадная стойка".`); err != nil {
		return err
	}
	if err = st.SetText(consts.HelloTTS, `Привет! Добро пожаловать в игру "Лимонадная стойка".`); err != nil {
		return err
	}

	// Set text for IsStart scene
	if err = st.SetText(consts.IsStartText, `Поиграем?`); err != nil {
		return err
	}
	if err = st.SetText(consts.IsStartTTS, `Поиграем?`); err != nil {
		return err
	}

	// Set text for NewDay scene
	if err = st.SetText(consts.NewDayText, `Настал новый день. Вы снова в магазине`); err != nil {
		return err
	}
	if err = st.SetText(consts.NewDayTTS, `Настал новый день. Вы снова в магазине`); err != nil {
		return err
	}

	// Set text for Rules scene
	if err = st.SetText(consts.RulesText, `В Вашем саду растет денежное дерево. Пока что на нём только один листик, но Вы можете помочь ему вырастить ещё! Каждый лист дает вам по 2 золотые монеты в конце каждого раунда. У дерева есть 5 жизней, если они все закончатся, то придется начинать игру сначала.  Чтобы дерево чувствовало себя хорошо, оно должно быть полито из расчета по пять капель на лист.  От разных погодных условий количество капель может меняться - в жару оно увеличивается, а в дождь уменьшается.  Если день будет ветреным, то листья могут осыпаться с Вашего дерева и не приносить доход.  Не политое растение начнет терять свои жизни. Если будет холодно, то ни один листик не принесет Вам золота!  Также после дождливого дня появляются жуки, которые любят полакомиться листьями денежного дерева.  К счастью, от всех этих неприятностей продаются разные предметы в магазине, в который Вы можете заглянуть перед началом каждого раунда.`); err != nil {
		return err
	}
	if err = st.SetText(consts.RulesTTS, `В Вашем саду растет денежное дерево. Пока что на нём только один листик, но Вы можете помочь ему вырастить ещё!  Каждый лист дает вам по 2 золотые монеты в конце каждого раунда.\n У дерева есть 5 жизней, если они все закончатся, то придется начинать игру сначала.  Чтобы дерево чувствовало себя хорошо, оно должно быть полито из расчета по пять капель на лист. От разных погодных условий количество капель может меняться - в жару оно увеличивается, а в дождь уменьшается. Если день будет ветреным, то листья могут осыпаться с Вашего дерева и не приносить доход. Не политое растение начнет терять свои жизни. Если будет холодно, то ни один листик не принесет Вам золота!  Также после дождливого дня появляются жуки, которые любят полакомиться листьями денежного дерева.  К счастью, от всех этих неприятностей продаются разные предметы в магазине, в который Вы можете заглянуть перед началом каждого раунда.`); err != nil {
		return err
	}

	// Set text for Shop scene
	if err = st.SetText(consts.ShopText, `В магазине продается вода по цене 1 монета за 5 капель, защита от ветра по цене {flyCost} монет, теплица по цене {greenhouseCost} монет,  защита от жуков по цене{bugsCost} монет, лекарство от болезни по цене {healCost} монет, аптечка по цене 5 монет. Что вы бы хотели купить?`); err != nil {
		return err
	}
	if err = st.SetText(consts.ShopTTS, `В магазине продается вода по цене одна монета за пять капель, защита от ветра по цене {flyCost} монет, теплица по цене {greenhouseCost} монет,  защита от жуков по цене{bugsCost} монет, лекарство от болезни по цене {healCost} монет, аптечка по цене пять монет. Что вы бы хотели купить?`); err != nil {
		return err
	}

	// Set text for StartRules scene
	if err = st.SetText(consts.StartRulesText, `Правила игры очень просты. 
Вы решили открыть ларёк для продажи лимонада. У Вас есть 7 дней, чтобы заработать как можно больше денег!
Каждый игровой день с утра Вы узнаёте прогноз погоды, заказываете рекламные стенды и лёд, а также решаете,
сколько стаканов лимонада сделать и за сколько каждый продать. На основе Ваших решений и погоды, за день
Вы получаете прибыль которая отражается на вашем балансе. По истечении семи игровых дней
Вы увидите, сколько денег Вы заработали. Один стакан стоит 10 рублей.
Один кубик льда стоит 50 рублей. Один стенд стоит 10 рублей`); err != nil {
		return err
	}
	if err = st.SetText(consts.StartRulesTTS, `Правила игры очень просты.  Вы решили открыть ларёк для продажи лимонада. У Вас есть семь дней, чтобы заработать как можно больше денег! Каждый игровой день с утра Вы узнаёте прогноз погоды, заказываете рекламные стенды и лёд, а также решаете, сколько стаканов лимонада сделать и за сколько каждый продать. На основе Ваших решений и погоды, за день Вы получаете прибыль которая отражается на вашем балансе. По истечении семи игровых дней Вы увидите, сколько денег Вы заработали. Один стакан стоит десять рублей. Один кубик льда стоит пятьдесят рублей. Один стенд стоит десять рублей`); err != nil {
		return err
	}

	// Set info of saving text
	if err = st.SetText(checkKey, checkKey); err != nil {
		return err
	}

	return nil
}
func clearOldStores(st store.ScriptStore) error {
	// Get all keys for currentScript of saving text
	keys, err := st.GetAllTextKeyForScript("LemonadeGame")
	if err != nil {
		return err
	}

	for _, key := range keys {
		_ = st.DeleteText(key)
	}

	return nil
}

func SaveScripts(st store.ScriptStore) error {
	if checkScriptStore(st) {
		return ScriptAlreadySaveError
	}

	err := clearOldStores(st)
	if err != nil {
		return err
	}
	return saveScripts(st)
}
